{"version":3,"sources":["../ts/abstract-list.ts"],"names":["AbstractList","[object Object]","elements","element","this","add","size","exports"],"mappings":"oEAeA,MAAsBA,aAcdC,OAAOC,GAEb,IAAK,IAAIC,KAAWD,EAAUE,KAAKC,IAAIF,GAwCjCF,UAEN,OAAwB,IAAhBG,KAAKE,QA1DfC,QAAAP,aAAAA","file":"abstract-list.js","sourcesContent":["/*\n *\tCreated by Trevor Sears <trevorsears.main@gmail.com>.\n *\t7:57 PM -- July 18th, 2019.\n *\tProject: @jsdsl/abstract-list\n */\n\nimport { IIterator } from \"iter-over\";\n\n/**\n * An abstraction of the list data structure.\n *\n * @author Trevor Sears <trevorsears.main@gmail.com>\n * @version v0.4.0\n * @since v0.1.0\n */\nexport abstract class AbstractList<E> {\n\t\n\t/**\n\t * Adds an element to this list.\n\t * \n\t * @param element The element to add to this list.\n\t */\n\tpublic abstract add(element: E): void;\n\t\n\t/**\n\t * Adds multiple elements to this list.\n\t * \n\t * @param elements The elements to add to this list.\n\t */\n\tpublic addAll(elements: E[]): void {\n\t\t\n\t\tfor (let element of elements) this.add(element);\n\t\t\n\t}\n\t\n\t/**\n\t * Returns the element at the specified index, or undefined if the index was out-of-bounds.\n\t * \n\t * @param index The index from which to retrieve an element.\n\t * @return The element at the specified index, or undefined if the index was out-of-bounds.\n\t */\n\tpublic abstract get(index: number): E | undefined;\n\t\n\t/**\n\t * Removes the specified element from this list.\n\t * \n\t * @param element The element to remove from this list.\n\t */\n\tpublic abstract remove(element: E): void;\n\t\n\t/**\n\t * Returns the number of elements contained in this list.\n\t * \n\t * @return The number of elements contained in this list.\n\t */\n\tpublic abstract size(): number;\n\t\n\t/**\n\t * Returns true if the provided element is contained in this list.\n\t * \n\t * @param element The element to check this list for.\n\t * @return true if the provided element is contained in this list.\n\t */\n\tpublic abstract contains(element: E): boolean;\n\t\n\t/**\n\t * Returns true if this list contains no elements.\n\t * \n\t * @return true if this list contains no elements.\n\t * @see AbstractList#size\n\t */\n\tpublic isEmpty(): boolean {\n\t\t\n\t\treturn (this.size() === 0);\n\t\t\n\t}\n\t\n\t/**\n\t * Removes all elements from this list, rendering the list empty.\n\t */\n\tpublic abstract clear(): void;\n\t\n\t/**\n\t * Returns an iterator over the elements of this list.\n\t * \n\t * @return An iterator over the elements of this list.\n\t * @see IIterator\n\t */\n\tpublic abstract iterator(): IIterator<E>;\n\t\n\t/**\n\t * Returns this list represented as an array of its elements.\n\t * \n\t * @return This list represented as an array of its elements.\n\t */\n\tpublic abstract toArray(): E[];\n\t\n}"]}