{"version":3,"sources":["../ts/abstract-list.ts"],"names":[],"mappings":";;AAeA,MAAsB,YAAY;IAI1B,MAAM,CAAC,QAAa;QAE1B,KAAK,IAAI,OAAO,IAAI,QAAQ;YAAE,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IAEjD,CAAC;IAUM,OAAO;QAEb,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;IAE5B,CAAC;CAQD;AA9BD,oCA8BC","file":"abstract-list.js","sourcesContent":["/*\n *\tCreated by Trevor Sears <trevorsears.main@gmail.com>.\n *\t7:57 PM -- July 18th, 2019.\n *\tProject: @jsdsl/abstract-list\n */\n\nimport { IIterator } from \"iter-over\";\n\n/**\n * An abstraction of the list data structure.\n *\n * @author Trevor Sears <trevorsears.main@gmail.com>\n * @version v0.1.0\n * @since v0.1.0\n */\nexport abstract class AbstractList<E> {\n\t\n\tpublic abstract add(element: E): void;\n\t\n\tpublic addAll(elements: E[]): void {\n\t\t\n\t\tfor (let element of elements) this.add(element);\n\t\t\n\t}\n\t\n\tpublic abstract get(index: number): E;\n\t\n\tpublic abstract remove(element: E): void;\n\t\n\tpublic abstract size(): number;\n\t\n\tpublic abstract contains(element: E): boolean;\n\t\n\tpublic isEmpty(): boolean {\n\t\t\n\t\treturn (this.size() === 0);\n\t\t\n\t}\n\t\n\tpublic abstract clear(): void;\n\t\n\tpublic abstract iterator(): IIterator<E>;\n\t\n\tpublic abstract toArray(): E[];\n\t\n}"]}